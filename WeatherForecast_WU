//**********************************************Weather Class File ***************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;

namespace WeatherData_Google
{
    class Weather
    {
        public static Conditions GetCurrentConditions(string location)
        {  
            Conditions conditions = new Conditions();
            XmlDocument xmlConditions = new XmlDocument();
            XmlDocument xmlForecast = new XmlDocument();
            String strAPIKey = "a417af07153eda5c";
            xmlConditions.Load(string.Format("http://api.wunderground.com/api/{0}/conditions/q/{1}.xml", strAPIKey, location));
            xmlForecast.Load(string.Format("http://api.wunderground.com/api/{0}/forecast/q/{1}.xml", strAPIKey, location));
            if (xmlConditions.SelectSingleNode("response/error") != null) 
            {  
                conditions = null;  
            }
            else 
            {  
                conditions.City = xmlConditions.SelectSingleNode("/response/current_observation/display_location/full").InnerText;
                conditions.Condition = xmlForecast.SelectSingleNode("/response/forecast/txt_forecast/forecastdays/forecastday/fcttext").InnerText;
                conditions.TempF = xmlForecast.SelectSingleNode("/response/forecast/simpleforecast/forecastdays/forecastday/high/fahrenheit").InnerText;
                conditions.TempC = xmlForecast.SelectSingleNode("/response/forecast/simpleforecast/forecastdays/forecastday/high/celsius").InnerText;
                conditions.Humidity = xmlForecast.SelectSingleNode("/response/forecast/simpleforecast/forecastdays/forecastday/avehumidity").InnerText;
                conditions.Wind = xmlForecast.SelectSingleNode("/response/forecast/simpleforecast/forecastdays/forecastday/maxwind/mph").InnerText;
                conditions.Icon = xmlForecast.SelectSingleNode("/response/forecast/txt_forecast/forecastdays/forecastday/icon_url").InnerText;
            }
            
            return conditions;
        }

        public static List<Conditions> GetForecast(string location)
        { 
            List<Conditions> conditions = new List<Conditions>();
            XmlDocument xmlConditions = new XmlDocument(); 
            xmlConditions.Load(string.Format("http://www.google.com/ig/api?weather={0}", location)); 
            if (xmlConditions.SelectSingleNode("xml_api_reply/weather/problem_cause") != null)  
            {  
                conditions = null; 
            } 
            else 
            {  
                foreach (XmlNode node in xmlConditions.SelectNodes("/xml_api_reply/weather/forecast_conditions"))
                { 
                    Conditions condition = new Conditions(); 
                    condition.City = xmlConditions.SelectSingleNode("/xml_api_reply/weather/forecast_information/city").Attributes["data"].InnerText;
                    condition.Condition = node.SelectSingleNode("condition").Attributes["data"].InnerText;
                    condition.High = node.SelectSingleNode("high").Attributes["data"].InnerText;
                    condition.Low = node.SelectSingleNode("low").Attributes["data"].InnerText;
                    condition.DayOfWeek = node.SelectSingleNode("day_of_week").Attributes["data"].InnerText;
                    conditions.Add(condition);
                }
            }
            return conditions;
        } 
    }

    public class Conditions
    {  
        string city = "No Data";
        string dayOfWeek = DateTime.Now.DayOfWeek.ToString();
        string condition = "No Data";
        string tempF = "No Data";
        string tempC = "No Data";
        string humidity = "No Data"; 
        string wind = "No Data";
        string high = "No Data"; 
        string low = "No Data";
        string icon = "";

        public string City
        {  
            get { return city; }  
            set { city = value; }
        }  

        public string Condition
        {  
            get { return condition; }
            set { condition = value; }
        }  

        public string TempF
        {  
            get { return tempF; }
            set { tempF = value; }
        } 
        
        public string TempC
        {
            get { return tempC; }
            set { tempC = value; }
        } 
 
        public string Humidity 
        {  
            get { return humidity; }
            set { humidity = value; }
        } 
        
        public string Wind         
        {  
            get { return wind; }
            set { wind = value; }
        }  
        
        public string DayOfWeek 
        {  
            get { return dayOfWeek; }
            set { dayOfWeek = value; } 
        }  
        
        public string High
        {  
            get { return high; }
            set { high = value; } 
        }  
        
        public string Low  
        {  
            get { return low; } 
            set { low = value; }  
        }

        public string Icon
        {
            get { return icon; }
            set { icon = value; }
        }
    } 

}

//************************************************** Main Class File **********************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WeatherData_Google
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            Conditions cond = new Conditions();
            String strInputLoc = txtLoc.Text;
            cond = Weather.GetCurrentConditions(strInputLoc);
            String strDay1 = "";
            String strLoc = "";
            String strIcon1 = "";
            if (cond != null)
            {
                strLoc = "Weather Conditions for: " + cond.City;
                strDay1 = "Conditions: " + cond.Condition;
                strDay1 = strDay1 + System.Environment.NewLine + "Temp: " + cond.TempF + "°F (" + cond.TempC + "°C)";
                strDay1 = strDay1 + System.Environment.NewLine + "Humidity: " + cond.Humidity;
                strDay1 = strDay1 + System.Environment.NewLine + "Wind: " + cond.Wind;
                strIcon1 = cond.Icon;
            }
            else
            {
                strDay1 = "Error Processing Request";
            }
            lblLoc.Content = strLoc;
            lblDay1.Content = strDay1;
        
            imgDay1.Source = new BitmapImage(new Uri(strIcon1, UriKind.Absolute));
        }
    }
}


